// <auto-generated />
using System;
using ApiClubMed.Models.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiClubMed.Migrations
{
    [DbContext(typeof(ClubMedDBContexts))]
    [Migration("20230322103235_CreationBDClubMed")]
    partial class CreationBDClubMed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteCarte", b =>
                {
                    b.Property<int>("ActiviteCarteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("aca_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActiviteCarteId"));

                    b.Property<int>("AgeMin")
                        .HasColumnType("integer")
                        .HasColumnName("aca_agemin");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aca_description");

                    b.Property<int>("Duree")
                        .HasColumnType("integer")
                        .HasColumnName("aca_duree");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aca_frequence");

                    b.Property<decimal>("Prix")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("aca_prix");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aca_titre");

                    b.Property<int>("TypeActiviteId")
                        .HasColumnType("integer")
                        .HasColumnName("tac_id");

                    b.HasKey("ActiviteCarteId")
                        .HasName("pk_activitecarte");

                    b.HasIndex("TypeActiviteId");

                    b.ToTable("t_e_activitecarte_aca");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteEnfantCarte", b =>
                {
                    b.Property<int>("ActiviteEnfantCarteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("aec_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActiviteEnfantCarteId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("aec_description");

                    b.Property<int>("Duree")
                        .HasColumnType("integer")
                        .HasColumnName("aec_duree");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aec_frequence");

                    b.Property<decimal>("Prix")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("aec_prix");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aec_titre");

                    b.HasKey("ActiviteEnfantCarteId")
                        .HasName("pk_activiteenfantcarte");

                    b.ToTable("t_e_activiteenfantcarte_aec");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteEnfantIncluse", b =>
                {
                    b.Property<int>("ActiviteEnfantIncluseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("aei_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActiviteEnfantIncluseId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("aei_description");

                    b.Property<int>("Duree")
                        .HasColumnType("integer")
                        .HasColumnName("aei_duree");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aei_frequence");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aei_titre");

                    b.HasKey("ActiviteEnfantIncluseId")
                        .HasName("pk_activiteenfantincluse");

                    b.ToTable("t_e_activiteenfantincluse_aei");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteIncluse", b =>
                {
                    b.Property<int>("ActiviteIncluseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("aci_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActiviteIncluseId"));

                    b.Property<int?>("AgeMin")
                        .HasColumnType("integer")
                        .HasColumnName("aci_agemin");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("aci_description");

                    b.Property<int?>("Duree")
                        .HasColumnType("integer")
                        .HasColumnName("aci_duree");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aci_frequence");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aci_titre");

                    b.Property<int>("TypeActiviteId")
                        .HasColumnType("integer")
                        .HasColumnName("tac_id");

                    b.HasKey("ActiviteIncluseId")
                        .HasName("pk_activiteincluse");

                    b.HasIndex("TypeActiviteId");

                    b.ToTable("t_e_activiteincluse_aci");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.AutreParticipant", b =>
                {
                    b.Property<int>("AutreParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("apt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AutreParticipantId"));

                    b.Property<int>("CiviliteId")
                        .HasColumnType("integer")
                        .HasColumnName("cvl_civiliteid");

                    b.Property<DateTime?>("DateNaissance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("apt_datenaissance")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("apt_nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("apt_prenom");

                    b.HasKey("AutreParticipantId")
                        .HasName("pk_autreparticipant");

                    b.HasIndex("CiviliteId");

                    b.ToTable("t_e_autreparticipant_apt", t =>
                        {
                            t.HasCheckConstraint("ck_apt_datenaissance", "apt_datenaissance < current_date");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Avis", b =>
                {
                    b.Property<int>("AvisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("avi_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AvisId"));

                    b.Property<int?>("ClientId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cli_clientid");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("avi_commentaire");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("avi_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("Note")
                        .HasColumnType("integer")
                        .HasColumnName("avi_note");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("pht_photoid");

                    b.Property<int?>("ResortId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("res_resortid");

                    b.HasKey("AvisId")
                        .HasName("pk_avis");

                    b.HasIndex("ClientId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ResortId");

                    b.ToTable("t_e_avis_avi", t =>
                        {
                            t.HasCheckConstraint("ck_avi_note", "avi_note between 0 and 5");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Bar", b =>
                {
                    b.Property<int>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bar_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BarId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bar_description");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bar_nom");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("pht_photoid");

                    b.Property<int>("ResortId")
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.HasKey("BarId")
                        .HasName("pk_bar");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ResortId");

                    b.ToTable("t_e_bar_bar");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.CarteBanquaire", b =>
                {
                    b.Property<int>("CarteBanquaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cba_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarteBanquaireId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("cli_clientid");

                    b.Property<string>("Cryptogramme")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cba_cryptogramme");

                    b.Property<DateTime>("DateExpiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("cba_dateexpiration")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NumeroCarte")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cba_numerocarte");

                    b.HasKey("CarteBanquaireId")
                        .HasName("pk_cartebanquaire");

                    b.HasIndex("ClientId");

                    b.HasIndex("Cryptogramme")
                        .IsUnique();

                    b.HasIndex("NumeroCarte")
                        .IsUnique();

                    b.ToTable("t_e_cartebanquaire_cba", t =>
                        {
                            t.HasCheckConstraint("ck_cba_dateexpiration", "cba_dateexpiration > CURRENT_DATE");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.CategorieTypeChambre", b =>
                {
                    b.Property<int>("CategorieTypeChambreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ctc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategorieTypeChambreId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ctc_libelle");

                    b.HasKey("CategorieTypeChambreId")
                        .HasName("pk_categorietypechambre");

                    b.HasIndex("Libelle")
                        .IsUnique();

                    b.ToTable("t_e_categorietypechambre_ctc");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Civilite", b =>
                {
                    b.Property<int>("CiviliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cvl_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CiviliteId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("char(6)")
                        .HasDefaultValue("Monsieur")
                        .HasColumnName("cvl_libelle");

                    b.HasKey("CiviliteId")
                        .HasName("pk_civilite");

                    b.HasIndex("Libelle")
                        .IsUnique();

                    b.ToTable("t_e_civilite_cvl", t =>
                        {
                            t.HasCheckConstraint("ck_cvl_libelle", "cvl_libelle in ('Monsieur', 'Madame', 'Mademoiselle', 'Anonyme')");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cli_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<int?>("CiviliteId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cvl_civiliteid");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_codepostal");

                    b.Property<DateTime?>("DateNaissance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("cli_datenaissance")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DerniereConnexion")
                        .HasColumnType("date")
                        .HasColumnName("cli_derniereconnexion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cli_email");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_nom");

                    b.Property<string>("NomRue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_nomrue");

                    b.Property<int?>("NumRue")
                        .HasColumnType("integer")
                        .HasColumnName("cli_numrue");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_password");

                    b.Property<int?>("PaysId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("pay_paysid");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_prenom");

                    b.Property<string>("Tel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_tel");

                    b.Property<string>("TempsRestant")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasDefaultValue("0 ans 0 mois 0 jours")
                        .HasColumnName("cli_tempsrestant");

                    b.Property<string>("Ville")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cli_ville");

                    b.HasKey("ClientId")
                        .HasName("pk_client");

                    b.HasIndex("CiviliteId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PaysId");

                    b.HasIndex("Tel")
                        .IsUnique();

                    b.ToTable("t_e_client_cli", t =>
                        {
                            t.HasCheckConstraint("ck_cli_datenaissance", "cli_datenaissance < current_date");

                            t.HasCheckConstraint("ck_cli_email", "cli_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$'");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Commodite", b =>
                {
                    b.Property<int>("CommoditeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("com_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommoditeId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("com_nom");

                    b.HasKey("CommoditeId")
                        .HasName("pk_commodite");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.ToTable("t_e_commodite_com");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.DomaineSkiable", b =>
                {
                    b.Property<int>("DomaineSkiableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dms_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DomaineSkiableId"));

                    b.Property<int>("AltitudeClub")
                        .HasColumnType("integer")
                        .HasColumnName("dms_altitudeclub");

                    b.Property<int>("AltitudeStation")
                        .HasColumnType("integer")
                        .HasColumnName("dms_altitudestation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("dms_description");

                    b.Property<bool>("InfoSkiAuPied")
                        .HasColumnType("boolean")
                        .HasColumnName("dms_infoskiaupied");

                    b.Property<decimal>("LongueurDesPistes")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("dms_longueurdespistes");

                    b.Property<int>("NbPiste")
                        .HasColumnType("integer")
                        .HasColumnName("dms_nbpiste");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dms_nom");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("pht_id");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dms_titre");

                    b.HasKey("DomaineSkiableId")
                        .HasName("pk_domaineskiable");

                    b.HasIndex("PhotoId");

                    b.ToTable("t_e_domaineskiable_dms");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Localisation", b =>
                {
                    b.Property<int>("LocalisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("loc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalisationId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("loc_nom");

                    b.HasKey("LocalisationId")
                        .HasName("pk_localisation");

                    b.ToTable("t_e_localisation_loc");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Payement", b =>
                {
                    b.Property<int>("PayementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pyt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PayementId"));

                    b.Property<double>("Montant")
                        .HasColumnType("double precision")
                        .HasColumnName("pyt_montant");

                    b.Property<int>("ReservationId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_reservationid");

                    b.HasKey("PayementId")
                        .HasName("pk_payement");

                    b.HasIndex("ReservationId");

                    b.ToTable("t_e_payement_pyt", t =>
                        {
                            t.HasCheckConstraint("ck_pyt_montant", "pyt_montant > 0");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pay_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaysId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pay_nom");

                    b.HasKey("PaysId");

                    b.ToTable("t_e_pays_pay");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pht_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Lien")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pht_lien");

                    b.HasKey("PhotoId")
                        .HasName("pk_photo");

                    b.ToTable("t_e_photo_pht");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.PointFort", b =>
                {
                    b.Property<int>("PointFortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ptf_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PointFortId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ptf_libelle");

                    b.HasKey("PointFortId")
                        .HasName("pk_pointfort");

                    b.HasIndex("Libelle")
                        .IsUnique();

                    b.ToTable("t_e_pointfort_ptf");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.RegroupementClub", b =>
                {
                    b.Property<int>("RegroupementClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rcl_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegroupementClubId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rcl_libelle");

                    b.HasKey("RegroupementClubId")
                        .HasName("pk_regroupementclub");

                    b.ToTable("t_e_regroupementclub_rcl");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rsv_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("cli_clientid");

                    b.Property<bool>("Confirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("rsv_confirmation");

                    b.Property<DateTime>("DateDebut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("rsv_datedebut")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DateFin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("rsv_datefin")
                        .HasDefaultValueSql("CURRENT_DATE + 1");

                    b.Property<decimal>("Prix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("rsv_prix");

                    b.Property<int>("ResortId")
                        .HasColumnType("integer")
                        .HasColumnName("res_resortid");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer")
                        .HasColumnName("tra_transportid");

                    b.Property<bool>("Validation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("rsv_validation");

                    b.HasKey("ReservationId")
                        .HasName("pk_reservation");

                    b.HasIndex("ClientId");

                    b.HasIndex("ResortId");

                    b.HasIndex("TransportId");

                    b.ToTable("t_e_reservation_rsv", t =>
                        {
                            t.HasCheckConstraint("ck_rsv_datefin", "rsv_datefin > rsv_datedebut");

                            t.HasCheckConstraint("ck_rsv_prix", "rsv_prix > 0");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Resort", b =>
                {
                    b.Property<int>("ResortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResortId"));

                    b.Property<string>("DescriptionGen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("res_descriptiongen");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("integer")
                        .HasColumnName("dms_domaineid");

                    b.Property<string>("LienPdfDocClub")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("res_lienpdfdocclub");

                    b.Property<int>("LocalisationId")
                        .HasColumnType("integer")
                        .HasColumnName("loc_localisationid");

                    b.Property<decimal?>("MoyenneAvis")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("res_moyenneavis");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("res_nom");

                    b.Property<decimal>("PrixDepart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(8,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("res_prixdepart");

                    b.Property<int?>("SouslocalisationId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("slo_souslocalisationid");

                    b.HasKey("ResortId")
                        .HasName("pk_resort");

                    b.HasIndex("DomaineId");

                    b.HasIndex("LocalisationId");

                    b.HasIndex("MoyenneAvis");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.HasIndex("SouslocalisationId");

                    b.ToTable("t_e_resort_res", t =>
                        {
                            t.HasCheckConstraint("ck_res_moyenneavis", "res_moyenneavis >= 0 AND res_moyenneavis <= 5");

                            t.HasCheckConstraint("ck_res_prixdepart", "res_prixdepart > 0");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rst_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bar_description");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bar_nom");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("pht_photoid");

                    b.Property<int>("ResortId")
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.HasKey("RestaurantId")
                        .HasName("pk_restaurant");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ResortId");

                    b.ToTable("t_e_restaurant_rst");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.SousLocalisation", b =>
                {
                    b.Property<int>("SousLocalisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("slo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SousLocalisationId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slo_nom");

                    b.HasKey("SousLocalisationId")
                        .HasName("pk_souslocalisation");

                    b.ToTable("t_e_souslocalisation_slo");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TrancheAge", b =>
                {
                    b.Property<int>("TrancheAgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrancheAgeId"));

                    b.Property<int>("AgeMax")
                        .HasColumnType("integer")
                        .HasColumnName("tag_agemax");

                    b.Property<int>("AgeMin")
                        .HasColumnType("integer")
                        .HasColumnName("tag_agemin");

                    b.HasKey("TrancheAgeId")
                        .HasName("pk_trancheage");

                    b.ToTable("t_e_trancheage_tag");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tra_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransportId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tra_libelle");

                    b.HasKey("TransportId")
                        .HasName("pk_transport");

                    b.ToTable("t_e_transport_tra");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeActivite", b =>
                {
                    b.Property<int>("TypeActiviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tac_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeActiviteId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("tac_description");

                    b.Property<int>("NbActiviteCarte")
                        .HasColumnType("integer")
                        .HasColumnName("tac_nbactivitecarte");

                    b.Property<int>("NbActiviteIncluse")
                        .HasColumnType("integer")
                        .HasColumnName("tac_nbactiviteincluse");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("pht_id");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tac_titre");

                    b.HasKey("TypeActiviteId")
                        .HasName("pk_typeactivite");

                    b.HasIndex("PhotoId");

                    b.ToTable("t_e_typeactivite_tac");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeChambre", b =>
                {
                    b.Property<int>("TypeChambreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tpc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeChambreId"));

                    b.Property<int?>("Capacite")
                        .HasColumnType("integer")
                        .HasColumnName("tpc_capacite");

                    b.Property<int?>("CategorieTypeChambreId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("ctc_id");

                    b.Property<string>("LibelleCatgorie")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tpc_libellecatgorie");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("tpc_presentation");

                    b.Property<int?>("PrixJournalier")
                        .HasColumnType("integer")
                        .HasColumnName("tpc_prixjournalier");

                    b.Property<int?>("ResortId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.Property<decimal>("Surface")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("tpc_surface");

                    b.HasKey("TypeChambreId")
                        .HasName("pk_typechambre");

                    b.HasIndex("CategorieTypeChambreId");

                    b.HasIndex("ResortId");

                    b.ToTable("t_e_typechambre_tpc", t =>
                        {
                            t.HasCheckConstraint("ck_tpc_capacite", "tpc_capacite > 0 ");

                            t.HasCheckConstraint("ck_tpc_prixjournalier", "tpc_prixjournalier > 0 ");

                            t.HasCheckConstraint("ck_tpc_surface", "tpc_surface > 0 ");
                        });
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeClub", b =>
                {
                    b.Property<int>("TypeClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tcl_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeClubId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tcl_libelle");

                    b.HasKey("TypeClubId")
                        .HasName("pk_typeclub");

                    b.ToTable("t_e_typeclub_tcl");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vid_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VideoId"));

                    b.Property<string>("Lien")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vid_lien");

                    b.HasKey("VideoId")
                        .HasName("pk_video");

                    b.ToTable("t_e_video_vid");
                });

            modelBuilder.Entity("t_j_activitecarteenfantincluseresort_cir", b =>
                {
                    b.Property<int>("aei_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("aei_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_activitecarteenfantincluseresort_cir");
                });

            modelBuilder.Entity("t_j_activitecarteenfantreservation_cer", b =>
                {
                    b.Property<int>("aec_id")
                        .HasColumnType("integer");

                    b.Property<int>("rsv_id")
                        .HasColumnType("integer");

                    b.HasKey("aec_id", "rsv_id");

                    b.HasIndex("rsv_id");

                    b.ToTable("t_j_activitecarteenfantreservation_cer");
                });

            modelBuilder.Entity("t_j_activitecarteenfantresort_cer", b =>
                {
                    b.Property<int>("aec_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("aec_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_activitecarteenfantresort_cer");
                });

            modelBuilder.Entity("t_j_activitecartereservation_acr", b =>
                {
                    b.Property<int>("aca_id")
                        .HasColumnType("integer");

                    b.Property<int>("rsv_id")
                        .HasColumnType("integer");

                    b.HasKey("aca_id", "rsv_id");

                    b.HasIndex("rsv_id");

                    b.ToTable("t_j_activitecartereservation_acr");
                });

            modelBuilder.Entity("t_j_activitecarteresort_acr", b =>
                {
                    b.Property<int>("aca_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("aca_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_activitecarteresort_acr");
                });

            modelBuilder.Entity("t_j_activiteenfantcartetrancheage_act", b =>
                {
                    b.Property<int>("aec_id")
                        .HasColumnType("integer");

                    b.Property<int>("tag_id")
                        .HasColumnType("integer");

                    b.HasKey("aec_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("t_j_activiteenfantcartetrancheage_act");
                });

            modelBuilder.Entity("t_j_activiteenfantinclusetrancheage_ait", b =>
                {
                    b.Property<int>("aei_id")
                        .HasColumnType("integer");

                    b.Property<int>("tag_id")
                        .HasColumnType("integer");

                    b.HasKey("aei_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("t_j_activiteenfantinclusetrancheage_ait");
                });

            modelBuilder.Entity("t_j_activiteincluseresort_air", b =>
                {
                    b.Property<int>("aci_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("aci_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_activiteincluseresort_air");
                });

            modelBuilder.Entity("t_j_localisationsouslocalisation_lsl", b =>
                {
                    b.Property<int>("loc_id")
                        .HasColumnType("integer");

                    b.Property<int>("slo_id")
                        .HasColumnType("integer");

                    b.HasKey("loc_id", "slo_id");

                    b.HasIndex("slo_id");

                    b.ToTable("t_j_localisationsouslocalisation_lsl");
                });

            modelBuilder.Entity("t_j_regroupementclubresort_rcr", b =>
                {
                    b.Property<int>("rcl_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("rcl_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_regroupementclubresort_rcr");
                });

            modelBuilder.Entity("t_j_reservationautreparticipant_sap", b =>
                {
                    b.Property<int>("apt_id")
                        .HasColumnType("integer");

                    b.Property<int>("rsv_id")
                        .HasColumnType("integer");

                    b.HasKey("apt_id", "rsv_id");

                    b.HasIndex("rsv_id");

                    b.ToTable("t_j_reservationautreparticipant_sap");
                });

            modelBuilder.Entity("t_j_resortphoto_rph", b =>
                {
                    b.Property<int>("pht_id")
                        .HasColumnType("integer");

                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.HasKey("pht_id", "res_id");

                    b.HasIndex("res_id");

                    b.ToTable("t_j_resortphoto_rph");
                });

            modelBuilder.Entity("t_j_resortvideo_rvi", b =>
                {
                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.Property<int>("vid_id")
                        .HasColumnType("integer");

                    b.HasKey("res_id", "vid_id");

                    b.HasIndex("vid_id");

                    b.ToTable("t_j_resortvideo_rvi");
                });

            modelBuilder.Entity("t_j_trancheagetypeactivite_tta", b =>
                {
                    b.Property<int>("tac_id")
                        .HasColumnType("integer");

                    b.Property<int>("tag_id")
                        .HasColumnType("integer");

                    b.HasKey("tac_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("t_j_trancheagetypeactivite_tta");
                });

            modelBuilder.Entity("t_j_typechambrecommodite_tpc", b =>
                {
                    b.Property<int>("com_id")
                        .HasColumnType("integer");

                    b.Property<int>("tpc_id")
                        .HasColumnType("integer");

                    b.HasKey("com_id", "tpc_id");

                    b.HasIndex("tpc_id");

                    b.ToTable("t_j_typechambrecommodite_tpc");
                });

            modelBuilder.Entity("t_j_typechambrepointfort_tpf", b =>
                {
                    b.Property<int>("ptf_id")
                        .HasColumnType("integer");

                    b.Property<int>("tpc_id")
                        .HasColumnType("integer");

                    b.HasKey("ptf_id", "tpc_id");

                    b.HasIndex("tpc_id");

                    b.ToTable("t_j_typechambrepointfort_tpf");
                });

            modelBuilder.Entity("t_j_typeclubresort_tcr", b =>
                {
                    b.Property<int>("res_id")
                        .HasColumnType("integer");

                    b.Property<int>("tcl_id")
                        .HasColumnType("integer");

                    b.HasKey("res_id", "tcl_id");

                    b.HasIndex("tcl_id");

                    b.ToTable("t_j_typeclubresort_tcr");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteCarte", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeActivite", "LeTypeActivite")
                        .WithMany("LesActiviteCartes")
                        .HasForeignKey("TypeActiviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeTypeActivite");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.ActiviteIncluse", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeActivite", "LeTypeActivite")
                        .WithMany("LesActiviteIncluses")
                        .HasForeignKey("TypeActiviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeTypeActivite");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.AutreParticipant", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Civilite", "LaCivilite")
                        .WithMany("LesAutreParticipants")
                        .HasForeignKey("CiviliteId")
                        .IsRequired()
                        .HasConstraintName("fk_apt_cvl");

                    b.Navigation("LaCivilite");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Avis", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Client", "LeClient")
                        .WithMany("LesAvis")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_avi_cli");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", "LaPhoto")
                        .WithMany("LesAvis")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("fk_pht_avi");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", "LeResort")
                        .WithMany("LesAvis")
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("fk_avi_res");

                    b.Navigation("LaPhoto");

                    b.Navigation("LeClient");

                    b.Navigation("LeResort");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Bar", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", "LaPhoto")
                        .WithMany("LesBars")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("fk_pht_bar");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", "LeResort")
                        .WithMany("LesBars")
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("fk_bar_res");

                    b.Navigation("LaPhoto");

                    b.Navigation("LeResort");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.CarteBanquaire", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Client", "LeClient")
                        .WithMany("LesCarteBanquaires")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_cba_cli");

                    b.Navigation("LeClient");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Client", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Civilite", "LaCivilite")
                        .WithMany("LesClients")
                        .HasForeignKey("CiviliteId")
                        .IsRequired()
                        .HasConstraintName("fk_cli_cvl");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Pays", "LePays")
                        .WithMany("LesClients")
                        .HasForeignKey("PaysId")
                        .IsRequired()
                        .HasConstraintName("fk_cli_pys");

                    b.Navigation("LaCivilite");

                    b.Navigation("LePays");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.DomaineSkiable", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", "LaPhoto")
                        .WithMany("LesDomaineSkiables")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("fk_pht_dms");

                    b.Navigation("LaPhoto");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Payement", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Reservation", "LaReservation")
                        .WithMany("LesPayements")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("fk_pyt_rsv");

                    b.Navigation("LaReservation");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Reservation", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Client", "LeClient")
                        .WithMany("LesReservations")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_rsv_cli");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", "LeResort")
                        .WithMany("LesReservations")
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("fk_rsv_res");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Transport", "LeTransport")
                        .WithMany("LesReservations")
                        .HasForeignKey("TransportId")
                        .IsRequired()
                        .HasConstraintName("fk_rsv_tra");

                    b.Navigation("LeClient");

                    b.Navigation("LeResort");

                    b.Navigation("LeTransport");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Resort", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.DomaineSkiable", "LeDomaineSkiable")
                        .WithMany("LesResorts")
                        .HasForeignKey("DomaineId")
                        .HasConstraintName("fk_res_dom");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Localisation", "LaLocalisation")
                        .WithMany("LesResorts")
                        .HasForeignKey("LocalisationId")
                        .IsRequired()
                        .HasConstraintName("fk_res_loc");

                    b.HasOne("ApiClubMed.Models.EntityFramework.SousLocalisation", "LaSousLocalisation")
                        .WithMany("LesResorts")
                        .HasForeignKey("SouslocalisationId")
                        .IsRequired()
                        .HasConstraintName("fk_res_slo");

                    b.Navigation("LaLocalisation");

                    b.Navigation("LaSousLocalisation");

                    b.Navigation("LeDomaineSkiable");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Restaurant", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", "LaPhoto")
                        .WithMany("LesRestaurants")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("fk_pht_rst");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", "LeResort")
                        .WithMany("LesRestaurants")
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("fk_rst_res");

                    b.Navigation("LaPhoto");

                    b.Navigation("LeResort");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeActivite", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", "LaPhoto")
                        .WithMany("LesTypeActivites")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("fk_pht_tac");

                    b.Navigation("LaPhoto");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeChambre", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.CategorieTypeChambre", "LaCategorieTypeChambre")
                        .WithMany("LesTypeChambres")
                        .HasForeignKey("CategorieTypeChambreId")
                        .IsRequired()
                        .HasConstraintName("fk_tpc_ctc");

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", "LeResort")
                        .WithMany("LesTypeChambres")
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("fk_tpc_res");

                    b.Navigation("LaCategorieTypeChambre");

                    b.Navigation("LeResort");
                });

            modelBuilder.Entity("t_j_activitecarteenfantincluseresort_cir", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteEnfantIncluse", null)
                        .WithMany()
                        .HasForeignKey("aei_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activitecarteenfantreservation_cer", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteEnfantCarte", null)
                        .WithMany()
                        .HasForeignKey("aec_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Reservation", null)
                        .WithMany()
                        .HasForeignKey("rsv_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activitecarteenfantresort_cer", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteEnfantCarte", null)
                        .WithMany()
                        .HasForeignKey("aec_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activitecartereservation_acr", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteCarte", null)
                        .WithMany()
                        .HasForeignKey("aca_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Reservation", null)
                        .WithMany()
                        .HasForeignKey("rsv_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activitecarteresort_acr", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteCarte", null)
                        .WithMany()
                        .HasForeignKey("aca_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activiteenfantcartetrancheage_act", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteEnfantCarte", null)
                        .WithMany()
                        .HasForeignKey("aec_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TrancheAge", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activiteenfantinclusetrancheage_ait", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteEnfantIncluse", null)
                        .WithMany()
                        .HasForeignKey("aei_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TrancheAge", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_activiteincluseresort_air", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.ActiviteIncluse", null)
                        .WithMany()
                        .HasForeignKey("aci_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_localisationsouslocalisation_lsl", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Localisation", null)
                        .WithMany()
                        .HasForeignKey("loc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.SousLocalisation", null)
                        .WithMany()
                        .HasForeignKey("slo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_regroupementclubresort_rcr", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.RegroupementClub", null)
                        .WithMany()
                        .HasForeignKey("rcl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_reservationautreparticipant_sap", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.AutreParticipant", null)
                        .WithMany()
                        .HasForeignKey("apt_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Reservation", null)
                        .WithMany()
                        .HasForeignKey("rsv_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_resortphoto_rph", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Photo", null)
                        .WithMany()
                        .HasForeignKey("pht_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_resortvideo_rvi", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.Video", null)
                        .WithMany()
                        .HasForeignKey("vid_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_trancheagetypeactivite_tta", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeActivite", null)
                        .WithMany()
                        .HasForeignKey("tac_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TrancheAge", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_typechambrecommodite_tpc", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Commodite", null)
                        .WithMany()
                        .HasForeignKey("com_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeChambre", null)
                        .WithMany()
                        .HasForeignKey("tpc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_typechambrepointfort_tpf", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.PointFort", null)
                        .WithMany()
                        .HasForeignKey("ptf_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeChambre", null)
                        .WithMany()
                        .HasForeignKey("tpc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("t_j_typeclubresort_tcr", b =>
                {
                    b.HasOne("ApiClubMed.Models.EntityFramework.Resort", null)
                        .WithMany()
                        .HasForeignKey("res_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClubMed.Models.EntityFramework.TypeClub", null)
                        .WithMany()
                        .HasForeignKey("tcl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.CategorieTypeChambre", b =>
                {
                    b.Navigation("LesTypeChambres");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Civilite", b =>
                {
                    b.Navigation("LesAutreParticipants");

                    b.Navigation("LesClients");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Client", b =>
                {
                    b.Navigation("LesAvis");

                    b.Navigation("LesCarteBanquaires");

                    b.Navigation("LesReservations");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.DomaineSkiable", b =>
                {
                    b.Navigation("LesResorts");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Localisation", b =>
                {
                    b.Navigation("LesResorts");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Pays", b =>
                {
                    b.Navigation("LesClients");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Photo", b =>
                {
                    b.Navigation("LesAvis");

                    b.Navigation("LesBars");

                    b.Navigation("LesDomaineSkiables");

                    b.Navigation("LesRestaurants");

                    b.Navigation("LesTypeActivites");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Reservation", b =>
                {
                    b.Navigation("LesPayements");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Resort", b =>
                {
                    b.Navigation("LesAvis");

                    b.Navigation("LesBars");

                    b.Navigation("LesReservations");

                    b.Navigation("LesRestaurants");

                    b.Navigation("LesTypeChambres");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.SousLocalisation", b =>
                {
                    b.Navigation("LesResorts");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.Transport", b =>
                {
                    b.Navigation("LesReservations");
                });

            modelBuilder.Entity("ApiClubMed.Models.EntityFramework.TypeActivite", b =>
                {
                    b.Navigation("LesActiviteCartes");

                    b.Navigation("LesActiviteIncluses");
                });
#pragma warning restore 612, 618
        }
    }
}
